//!important, This is a node.js loader demo, to load `node on-chain application`.
//!important, The breif rule is treating it as cache service and can be stopped anytime.
//!important, Load unkown `node on-chain application` will face security problem.
const config={error:"\x1B[36m%s\x1B[0m",success:"\x1B[36m%s\x1B[0m"},fs=require("fs"),args=process.argv.slice(2);if(!args[0])return console.log(config.error,"Error: no input Anchor Link.");const linker=args[0],server=args[1]?args[1]:"ws://127.0.0.1:9944",anchorJS=require("../../package/node/anchor.node"),{ApiPromise,WsProvider}=require("../../package/node/polkadot.node"),{Keyring}=require("../../package/node/polkadot.node"),{easyRun}=require("../../package/node/easy.node");let websocket=null;const self={auto:o=>{if(websocket!==null)return o&&o();console.log(`Ready to link to server ${server}.`),ApiPromise.create({provider:new WsProvider(server)}).then(e=>(console.log(config.success,`Linker to node [${server}] created.`),websocket=e,anchorJS.set(e),anchorJS.setKeyring(Keyring),o&&o()))}};console.log(config.success,`Ready to decode Anchor Link : ${linker} .`),self.auto(()=>{const o={common:{latest:anchorJS.latest,target:anchorJS.target,history:anchorJS.history,owner:anchorJS.owner,subcribe:anchorJS.subcribe,block:anchorJS.block}};easyRun(linker,o,e=>{//!important, these functions limit the application
const c={anchorJS,easy:easyRun,polka:()=>{},ether:()=>{}},a={target:linker},r="API",n="input",s="errs",i=`;(function(${r},${n},${s}){${e.code}})(${r},${n},${s})`;try{const t=new Function(r,n,s,i);return console.log(config.success,"Application ready."),t(c,a,e.error)}catch{console.log(config.error,`Error: failed to load application from ${linker}.`)}})});
