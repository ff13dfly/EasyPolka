//!important, This is a node.js loader demo, to load `node on-chain application`.
//!important, The breif rule is treating it as cache service and can be stopped anytime.
//!important, Load unkown `node on-chain application` will face security problem.
const config={error:"\x1B[36m%s\x1B[0m",success:"\x1B[36m%s\x1B[0m"},fs=require("fs"),args=process.argv.slice(2);if(!args[0])return console.log(config.error,"Error: no input Anchor Link.");const linker=args[0],server=args[1]?args[1]:"ws://127.0.0.1:9944",anchorJS=require("../../package/node/anchor.node"),{ApiPromise,WsProvider}=require("../../package/node/polkadot.node"),{easyRun}=require("../../package/node/easy.node");let websocket=null;const self={auto:r=>{if(websocket!==null)return r&&r();console.log(`Ready to link to server ${server}.`),ApiPromise.create({provider:new WsProvider(server)}).then(e=>(console.log(config.success,`Linker to node [${server}] created.`),websocket=e,anchorJS.set(e),r&&r()))}};console.log(config.success,`Ready to decode Anchor Link : ${linker} .`),self.auto(()=>{const startAPI={common:{latest:anchorJS.latest,target:anchorJS.target,history:anchorJS.history,owner:anchorJS.owner,subcribe:anchorJS.subcribe,block:anchorJS.block}};easyRun(linker,startAPI,result=>{if(result.libs.order.length!==0){let funs={},str="";for(let r=0;r<result.libs.order.length;r++){const e=result.libs.order[r],o=`${e[0]}_${e[1]}`;if(result.data[o]){const s=result.data[o];console.log(o),console.log(s.raw.length),str+=`;funs['${e[0]}']=(function(){${s.raw};return module.exports})()`}}eval(str),console.log(funs)}//!important, these functions limit the application
const API={anchorJS,easy:easyRun,polka:()=>{},ether:()=>{}},input={target:linker},pa="API",pb="input",pc="errs",str=`;(function(${pa},${pb},${pc}){${result.code}})(${pa},${pb},${pc})`;try{const r=new Function(pa,pb,pc,str);return console.log(config.success,"Application ready."),r(API,input,result.error)}catch(r){console.log(config.error,`Error: failed to load application from ${linker}.`)}})});
