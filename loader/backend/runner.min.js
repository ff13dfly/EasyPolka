//!important, This is a node.js loader demo, to load `node on-chain application`.
//!important, The breif rule is treating it as cache service and can be stopped anytime.
//!important, Load unkown `node on-chain application` will face security problem.
const config={error:"\x1B[36m%s\x1B[0m",success:"\x1B[36m%s\x1B[0m",run:!1},fs=require("fs"),args=process.argv.slice(2);if(!args[0])return console.log(config.error,"Error: no input Anchor Link.");const linker=args[0],server=args[1]?args[1]:"ws://127.0.0.1:9944";let{anchorJS}=require("../lib/anchor.js"),{ApiPromise,WsProvider}=require("@polkadot/api"),{Keyring}=require("@polkadot/api"),{easyRun}=require("../lib/easy.js");config.run||(ApiPromise=Polkadot.ApiPromise,WsProvider=Polkadot.WsProvider,Keyring=Polkadot.Keyring,easyRun=Easy.easyRun);let websocket=null;const self={auto:o=>{if(websocket!==null)return o&&o();console.log(`Ready to link to server ${server}.`),ApiPromise.create({provider:new WsProvider(server)}).then(e=>{if(console.log(config.success,`Linker to node [${server}] created.`),websocket=e,config.run){const{anchorJS:t}=require("../lib/anchor.js"),{Keyring:c}=require("@polkadot/api")}return console.log(anchorJS),anchorJS.set(e),anchorJS.setKeyring(Keyring),o&&o()})}};console.log(config.success,`Ready to decode Anchor Link : ${linker} .`),self.auto(()=>{const o={common:{latest:anchorJS.latest,target:anchorJS.target,history:anchorJS.history,owner:anchorJS.owner,subcribe:anchorJS.subcribe,block:anchorJS.block}};easyRun(linker,o,e=>{//!important, these functions limit the application
const t={anchorJS,easy:easyRun,polka:()=>{},ether:()=>{}},c={target:linker},r="API",s="input",n="errs",l=`;(function(${r},${s},${n}){${e.code}})(${r},${s},${n})`;try{const i=new Function(r,s,n,l);return console.log(config.success,"Application ready."),i(t,c,e.error)}catch{console.log(config.error,`Error: failed to load application from ${linker}.`)}})});
