//!important, This is a node.js loader demo, to load `node on-chain application`.
//!important, The breif rule is treating it as cache service and can be stopped anytime.
//!important, Load unkown `node on-chain application` will face security problem.
const config={error:"\x1B[36m%s\x1B[0m",success:"\x1B[36m%s\x1B[0m"},fs=require("fs"),args=process.argv.slice(2);if(!args[0])return console.log(config.error,"Error: no input Anchor Link.");const linker=args[0],server=args[1]?args[1]:"ws://127.0.0.1:9944",anchorJS=require("../lib/anchor.js");let websocket=null;const self={auto:o=>{if(websocket!==null)return o&&o();console.log(`Ready to link to server ${server}.`);const{ApiPromise:s,WsProvider:r}=require("@polkadot/api"),{Keyring:t}=require("@polkadot/api");s.create({provider:new r(server)}).then(e=>(console.log(config.success,`Linker to node [${server}] created.`),websocket=e,anchorJS.set(e),anchorJS.setKeyring(t),o&&o()))}};console.log(config.success,`Ready to decode Anchor Link : ${linker} .`),self.auto(()=>{const{easyRun:o}=require("../lib/easy.js"),s={common:{latest:anchorJS.latest,target:anchorJS.target,history:anchorJS.history,owner:anchorJS.owner,subcribe:anchorJS.subcribe,block:anchorJS.block}};o(linker,s,r=>{//!important, these functions limit the application
const t={anchorJS,easy:o,polka:()=>{},ether:()=>{}},e={target:linker},n="API",c="input",i="errs",a=`;(function(${n},${c},${i}){${r.code}})(${n},${c},${i})`;try{const l=new Function(n,c,i,a);return console.log(config.success,"Application ready."),l(t,e,r.error)}catch{console.log(config.error,`Error: failed to load application from ${linker}.`)}})});
